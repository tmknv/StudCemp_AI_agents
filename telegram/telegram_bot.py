from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from BOT_TOKEN import TOKEN
import os
import asyncio
import aiofiles
import aiohttp
from pathlib import Path
import logging
from collections import deque

from p2txt import process_pdf
from AI_agents import get_result

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=TOKEN)
dp = Dispatcher()

DOWNLOADS_DIR = "files"
os.makedirs(DOWNLOADS_DIR, exist_ok=True)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
processing_queue = deque()
is_processing = False

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_processing_states = {}

async def process_next_in_queue():
    global is_processing
    
    if is_processing or not processing_queue:
        return
    
    is_processing = True
    
    while processing_queue:
        # –ë–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        user_data = processing_queue.popleft()
        message = user_data['message']
        user_id = user_data['user_id']
        
        try:
            await process_user_file(message, user_data['file_id'], user_data['file_name'])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            try:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            except:
                pass
        finally:
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if user_id in user_processing_states:
                del user_processing_states[user_id]
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–∞–º–∏
        await asyncio.sleep(1/3)
    
    is_processing = False

async def get_joke_from_api():
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–Ω–µ–∫–¥–æ—Ç —Å –≤–Ω–µ—à–Ω–µ–≥–æ API"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get("https://official-joke-api.appspot.com/jokes/random") as response:
                if response.status == 200:
                    data = await response.json()
                    return f"{data['setup']}\n\n{data['punchline']}"
                else:
                    return "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –Ω–µ —Ö–æ–¥—è—Ç –≤ –ª–µ—Å? –¢–∞–º —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –±–∞–≥–æ–≤! üêõ"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–µ–∫–¥–æ—Ç–∞: {e}")
        return "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –Ω–µ —Ö–æ–¥—è—Ç –≤ –ª–µ—Å? –¢–∞–º —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –±–∞–≥–æ–≤! üêõ"

async def process_user_file(message: types.Message, file_id: str, file_name: str):
    user_id = message.from_user.id
    # –ü–æ–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –Ω–∞—Ö–æ–¥—è—â–µ–≥–æ—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    user_processing_states[user_id] = True
    
    await message.answer("üì• –°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª...")
    file_path = os.path.join(DOWNLOADS_DIR, file_name)
    
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    await bot.download(file_id, destination=file_path)
    await message.answer("‚úÖ –§–∞–π–ª —Å–∫–∞—á–∞–Ω! –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PDF –≤ —Ç–µ–∫—Å—Ç
    processed_path = Path("temp_processed")
    processed_path.mkdir(exist_ok=True)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF
    loop = asyncio.get_event_loop()
    success = await loop.run_in_executor(None, process_pdf, Path(file_path), processed_path)
    
    if success:
        # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏
        txt_file_path = processed_path / f"{Path(file_name).stem}.txt"
        if txt_file_path.exists():
            async with aiofiles.open(txt_file_path, 'r', encoding='utf-8') as txt_file:
                article_text = await txt_file.read()
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–Ω–µ–∫–¥–æ—Ç–æ–≤
            joke_button = InlineKeyboardButton(text="–¢–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞", callback_data=f"joke_{user_id}")
            keyboard = InlineKeyboardMarkup(inline_keyboard=[[joke_button]])
            
            await message.answer(
                "üß† –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ–±–∑–æ—Ä... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –ø–∞—Ä—É –º–∏–Ω—É—Ç (–∞ –º–æ–∂–µ—Ç –∏ –¥–µ—Å—è—Ç–∫–æ–≤)\n"
                "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –∞ —á—Ç–æ —ç—Ç–æ –∑–∞ –∫–Ω–æ–ø–∫–∞ —Å–Ω–∏–∑—É?",
                reply_markup=keyboard
            )
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±–∑–æ—Ä
            try:
                review_text = await loop.run_in_executor(None, get_result, article_text)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–∑–æ—Ä
                if len(review_text) > 4000:
                    parts = [review_text[i:i+4000] for i in range(0, len(review_text), 4000)]
                    for i, part in enumerate(parts, 1):
                        await message.answer(f"üìÑ –ß–∞—Å—Ç—å {i}/{len(parts)}:\n\n{part}")
                else:
                    await message.answer(f"üìÑ –û–±–∑–æ—Ä —Å—Ç–∞—Ç—å–∏:\n\n{review_text}")
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±–∑–æ—Ä–∞: {e}")
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±–∑–æ—Ä–∞: {str(e)}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF —Ñ–∞–π–ª–∞")
        
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    try:
        if os.path.exists(file_path):
            os.remove(file_path)
        processed_path = Path("temp_processed")
        if processed_path.exists():
            for temp_file in processed_path.glob("*"):
                if temp_file.exists():
                    temp_file.unlink()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")

@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç-—Ä–µ—Ü–µ–Ω–∑–µ–Ω—Ç! üßê\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ PDF —Å—Ç–∞—Ç—å–∏, –∏ —è —Å–¥–µ–ª–∞—é –µ—ë —Ä–µ—Ü–µ–Ω–∑–∏—é –∑–∞ —Ç–µ–±—è "
    )

@dp.callback_query(F.data.startswith("joke_"))
async def send_joke(callback: types.CallbackQuery):
    user_id = int(callback.data.split("_")[1])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if user_id in user_processing_states and user_processing_states[user_id]:
        # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–µ–∫–¥–æ—Ç —Å API
        joke = await get_joke_from_api()
        
        await callback.message.answer(f"{joke}")
        await callback.answer()
    else:
        await callback.answer("–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üòä", show_alert=True)

@dp.message(F.document)
async def handle_document(message: types.Message):
    global is_processing
    
    file_name = message.document.file_name
    
    if not file_name.lower().endswith('.pdf'):
        await message.answer("–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF :(")
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—á–µ—Ä–µ–¥—å
    processing_queue.append({
        'message': message,
        'user_id': message.from_user.id,
        'file_id': message.document.file_id,
        'file_name': file_name
    })
    
    position = len(processing_queue)
    if is_processing:
        await message.answer(f"‚è≥ –í—ã –≤ –æ—á–µ—Ä–µ–¥–∏. –ü–æ–∑–∏—Ü–∏—è: {position}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏
    asyncio.create_task(process_next_in_queue())

async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
