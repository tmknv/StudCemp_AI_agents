from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from BOT_TOKEN import TOKEN
import os
from pathlib import Path

from p2txt import process_pdf

raw_pdf_path = Path('pdf_raw')
processed_pdf_path = Path('pdf_processed')

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
raw_pdf_path.mkdir(exist_ok=True)
processed_pdf_path.mkdir(exist_ok=True)

bot = Bot(token=TOKEN)
dp = Dispatcher()

DOWNLOADS_DIR = "files"
os.makedirs(DOWNLOADS_DIR, exist_ok=True)

# –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö
processed_files_info = []

@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç —Ä–µ—Ü–µ–Ω–∑–∏—Ä–æ–≤—â–∏–∫! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ PDF —Ñ–∞–π–ª —Å—Ç–∞—Ç—å–∏ –¥–ª—è —Ä–µ—Ü–µ–Ω–∑–∏–∏")

@dp.message(F.text)
async def echo_message(message: types.Message):
    await message.answer(f"–¢—ã –Ω–∞–ø–∏—Å–∞–ª: {message.text}, –∫—Ä—É—Ç–æ")

def process_single_pdf(pdf_path, original_name):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ PDF —Ñ–∞–π–ª–∞"""
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –≤ raw_pdf_path
        raw_file_path = raw_pdf_path / original_name
        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª)
        with open(pdf_path, 'rb') as src, open(raw_file_path, 'wb') as dst:
            dst.write(src.read())
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º PDF –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ processed_pdf_path
        success = process_pdf(Path(pdf_path), processed_pdf_path)
        
        if success:
            # –ò—â–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π txt —Ñ–∞–π–ª
            txt_file_path = processed_pdf_path / f"{Path(original_name).stem}.txt"
            if txt_file_path.exists():
                return {
                    "success": True, 
                    "message": f"‚úÖ –§–∞–π–ª '{original_name}' —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!",
                    "txt_path": str(txt_file_path),
                    "original_name": original_name
                }
            else:
                return {"success": False, "message": f"‚ùå –û—à–∏–±–∫–∞: TXT —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω –¥–ª—è '{original_name}'"}
        else:
            return {"success": False, "message": f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ '{original_name}'"}
            
    except Exception as e:
        return {"success": False, "message": f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ '{original_name}': {str(e)}"}

@dp.message(F.document)
async def handle_document(message: types.Message):
    file_id = message.document.file_id
    file_name = message.document.file_name
    
    if not file_name.lower().endswith('.pdf'):
        await message.answer("–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF :(")
        return
    
    await message.answer("–°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª...")
    file_path = os.path.join(DOWNLOADS_DIR, file_name)
    
    try:
        await bot.download(file_id, destination=file_path)
        await message.answer(f"–§–∞–π–ª '{file_name}' —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω!")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º PDF
        result = process_single_pdf(file_path, file_name)
        await message.answer(result["message"])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–º —Ñ–∞–π–ª–µ
        if result["success"]:
            processed_files_info.append({
                "original_name": result["original_name"],
                "txt_path": result["txt_path"],
                "timestamp": str(Path(result["txt_path"]).stat().st_mtime)
            })
            print(f"–î–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫: {result['original_name']}")
        
        # –ï—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏–∑ TXT —Ñ–∞–π–ª–∞
        if result["success"] and "txt_path" in result:
            try:
                with open(result["txt_path"], 'r', encoding='utf-8') as txt_file:
                    txt_content = txt_file.read()
                
                # # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞ (–æ–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π)
                # if len(txt_content) > 4000:
                #     await message.answer(txt_content[:4000] + "\n\n... (—Ç–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω)")
                # else:
                #     await message.answer(txt_content)
                
            except Exception as e:
                await message.answer(f"‚ö†Ô∏è –§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {str(e)}")
        
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞.")
        print(f"–û—à–∏–±–∫–∞: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
@dp.message(Command("files"))
async def show_processed_files(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    if not processed_files_info:
        await message.answer("üìù –°–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—É—Å—Ç")
        return
    
    response = f"üìù –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã ({len(processed_files_info)}):\n\n"
    for i, file_info in enumerate(processed_files_info, 1):
        response += f"{i}. {file_info['original_name']}\n"
    
    await message.answer(response)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–ø–∏—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
@dp.message(Command("clear_list"))
async def clear_processed_files_list(message: types.Message):
    """–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    global processed_files_info
    processed_files_info.clear()
    await message.answer("üóëÔ∏è –°–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –æ—á–∏—â–µ–Ω")

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
@dp.message(Command("clean"))
async def clean_files(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    try:
        # –û—á–∏—â–∞–µ–º downloads –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        for file_path in Path(DOWNLOADS_DIR).glob("*"):
            file_path.unlink()
        
        await message.answer("üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {str(e)}")


async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
